name: ci-atmos-plan-and-apply
on:
  workflow_call:
    secrets:
      environments_github_token:
        description: A GitHub token with write access to the repository's deployments.
        required: true
    inputs:
      ref:
        description: The ref to checkout. If not provided, the pull_request head ref is used.
        required: false
        type: string
        default: ${{ github.event.pull_request.head.sha }}
      default-branch:
        description: The default branch to use for the base ref.
        required: false
        type: string
        default: ${{ github.event.repository.default_branch }}
      stack:
        description: The stack name.
        required: true
        type: string
      component:
        description: The component name.
        required: true
        type: string
      component_path:
        description: The component path.
        required: true
        type: string
      environment:
        description: The GitHub environment name to deploy to.
        required: true
        type: string
      stack_slug:
        description: The atmos full stack name to create or update the deployment environment for.
        required: true
        type: string
    outputs:
      dependencies:
        description: The dependencies matrix
        value: ${{ jobs.dependencies-matrix.outputs.matrix }}
      has-dependencies:
        value: ${{ jobs.dependencies-matrix.outputs.has-dependencies }}
jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v2
      - uses: cloudposse/github-action-setup-atmos@v1.0.0
        with:
          install-wrapper: false
      - name: Get Atmos Setting for Secret ARN
        uses: cloudposse/github-action-atmos-get-setting@main
        id: secrets-arn
        with:
          component: ${{ inputs.component }}
          stack: ${{ inputs.stack }}
          settings-path: akamai.secrets-arn

      # This is just to show that the output is available. This will be the value passed to the
      # https://github.com/aws-actions/aws-secretsmanager-get-secrets action `secrets-ids` input.
      - run: echo ${steps.secrets-arn.outputs.value}

      # This is just to mock calling terraform plan. In reality, this would be a call to `atmos terraform plan`
      - run: echo "atmos terraform plan ${{inputs.component}} -s ${{inputs.stack}}"

  # Create the "real" deployment environment for each stack in the matrix. This is the environment that will be targeted
  # once the PR is merged.
  prep-deployment-env:
    uses: ./.github/workflows/ci-atmos-create-update-deployment-env.yaml
    with:
      ref: ${{ inputs.ref }}
      default-branch: ${{ inputs.default_branch }}
      stack: ${{ inputs.stack }}
      component: ${{ inputs.component }}
      stack_slug: ${{ inputs.stack_slug }}
    secrets:
      environments_github_token: ${{ secrets.environments_github_token }}

  apply:
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ inputs.environment }}
    steps:
      - uses: hashicorp/setup-terraform@v2
      - uses: cloudposse/github-action-setup-atmos@v1.0.0
        with:
          install-wrapper: false
      # This is just to show that the output is available. This will be the value passed to the
      # https://github.com/aws-actions/aws-secretsmanager-get-secrets action `secrets-ids` input.
      - run: echo ${steps.secrets-arn.outputs.value}

      # This is just to mock calling terraform plan. In reality, this would be a call to `atmos terraform plan`
      - run: echo "atmos terraform apply ${{inputs.component}} -s ${{inputs.stack}} --auto-approve"

  dependencies-matrix:
    runs-on: ubuntu-latest
    needs:
      - apply
      - prep-deployment-env
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      has-dependencies: ${{ steps.matrix.outputs.matrix!='{"include":[]}'}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - id: matrix
        run: |
          matrix=$(./scripts/deps.pl "${{inputs.stack}}-${{inputs.component}}"| jq -c '{include:[.[]]}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
