name: ci-atmos-create-update-deployment-env
run-name: upsert deployment environment
on:
  workflow_call:
    secrets:
      environments_github_token:
        description: A GitHub token with write access to the repository's deployments.
        required: true
    inputs:
      auto-deploy:
        description: Whether to override the config from atmos stack config setup the environment without approvals.
        required: false
        type: boolean
        default: false
      component:
        description: The atmos component to create or update the deployment environment for.
        required: true
        type: string
      stack:
        description: The atmos stack to create or update the deployment environment for.
        required: true
        type: string
      stack_slug:
        description: The atmos full stack name to create or update the deployment environment for.
        required: true
        type: string
      ref:
        description: The ref to checkout. If not provided, the pull_request head ref is used.
        required: false
        type: string
        default: ${{ github.event.pull_request.head.sha }}
      default-branch:
        description: The default branch to use for the base ref.
        required: false
        type: string
        default: ${{ github.event.repository.default_branch }}
jobs:
  create-update-deployment-env:
    name: create-update-deployment-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - uses: hashicorp/setup-terraform@v2
      - uses: cloudposse/github-action-setup-atmos@v1.0.0
        with:
          install-wrapper: false

      # Build the payload for the deployment environment API call from the atmos stack config
      - name: build payload from atmos
        id: payload
        uses: cloudposse/github-action-atmos-get-setting@0.0.2
        with:
          settings-path: github
          component: ${{ inputs.component }}
          stack: ${{ inputs.stack }}

      # Build the payload for the deployment environment API call for the 'draft' environment. That is auto-deployed
      # without approvals.
      - name: build auto-deploy payload
        id: auto-deploy-payload
        run: |
          payload='{"deployment_branch_policy":{"custom_branch_policies":true,"protected_branches":false},"reviewers":[],"wait_timer":0}'
          echo 'payload<<EOF' >> $GITHUB_OUTPUT
          echo "$payload" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # If auto-deploy is false, use the payload from atmos stack config.
      # TODO: We should refactor this code into a separate action that takes the payload as an input.
      - name: create or update standard deployment environment
        shell: bash
        if: inputs.auto-deploy == false
        run: |
          result=$(curl \
            -i \
            -sS \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.environments_github_token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${{github.api_url}}/repos/${{github.repository}}/environments/${{inputs.stack_slug}}" \
          -d '${{ steps.payload.outputs.value }}')

          # The curl command doesn't fail if the GitHub API returns an error. We need to check the result code and exit 
          # accordingly.
          resultCode=$(echo "$result" | head -n 1|cut -d$' ' -f2)
          if [ "$resultCode" == "200" ]; then exit 0; else echo "$result" && exit 1; fi

      # If auto-deploy is true, use the payload with an empty list of reviewers and a wait timer of 0.
      # TODO: See refactoring note above.
      - name: create or update auto-deploy deployment environment
        shell: bash
        if: inputs.auto-deploy == true
        run: |
          result=$(curl \
            -i \
            -sS \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.environments_github_token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${{github.api_url}}/repos/${{github.repository}}/environments/${{inputs.stack_slug}}" \
          -d '${{ steps.auto-deploy-payload.outputs.payload }}')

          # The curl command doesn't fail if the GitHub API returns an error. We need to check the result code and exit 
          # accordingly.
          resultCode=$(echo "$result" | head -n 1|cut -d$' ' -f2)
          if [ "$resultCode" == "200" ]; then exit 0; else echo "$result" && exit 1; fi
